name: Build wc3data WebAssembly

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 'latest'
        actions-cache-folder: 'emsdk-cache'

    - name: Verify Emscripten installation
      run: |
        emcc --version
        em++ --version

    - name: Create build directory
      run: mkdir -p build

    - name: List source files
      run: |
        echo "Repository structure:"
        find . -maxdepth 3 -name "*.cpp" -not -path "./emsdk*" -not -path "./.git*" | head -20
        echo "Source directory contents:"
        ls -la src/ || echo "src/ directory not found"
        echo "DataGen directory contents:"  
        ls -la DataGen/ || echo "DataGen/ directory not found"
        echo "Root directory:"
        ls -la *.cpp || echo "No cpp files in root"

    - name: Build wc3data with Emscripten
      run: |
        # Encontrar archivos .cpp solo en el proyecto (no en emsdk)
        CPP_FILES=$(find . -maxdepth 3 -name "*.cpp" -not -path "./emsdk*" -not -path "./.git*" -not -path "*/test*" -not -path "*/example*" | tr '\n' ' ')
        echo "Found CPP files: $CPP_FILES"
        
        if [ -z "$CPP_FILES" ]; then
          echo "No CPP files found, trying specific files..."
          # Intentar archivos específicos conocidos
          SPECIFIC_FILES=""
          [ -f "src/wc3data.cpp" ] && SPECIFIC_FILES="$SPECIFIC_FILES src/wc3data.cpp"
          [ -f "src/main.cpp" ] && SPECIFIC_FILES="$SPECIFIC_FILES src/main.cpp"
          [ -f "wc3data.cpp" ] && SPECIFIC_FILES="$SPECIFIC_FILES wc3data.cpp"
          [ -f "main.cpp" ] && SPECIFIC_FILES="$SPECIFIC_FILES main.cpp"
          CPP_FILES="$SPECIFIC_FILES"
        fi
        
        echo "Using CPP files: $CPP_FILES"
        
        # Compilar con configuración para web
        em++ -std=c++17 -O2 \
          -s WASM=1 \
          -s MODULARIZE=1 \
          -s EXPORT_NAME='WC3Module' \
          -s EXPORTED_RUNTIME_METHODS='["FS","ccall","cwrap","getValue","setValue","UTF8ToString","stringToUTF8","lengthBytesUTF8"]' \
          -s EXPORTED_FUNCTIONS='["_malloc","_free"]' \
          -s ALLOW_MEMORY_GROWTH=1 \
          -s FILESYSTEM=1 \
          -s ASSERTIONS=0 \
          -s EXCEPTION_CATCHING_ALLOWED='[..]' \
          --bind \
          -I. -Isrc -IDataGen \
          -DEMSCRIPTEN \
          -DUSE_EMSCRIPTEN \
          -DNO_WINDOWS \
          $CPP_FILES \
          -o build/wc3data.js \
          -s ENVIRONMENT='web'

    - name: Build alternative version (if main build fails)
      if: failure()
      run: |
        echo "Main build failed, trying DataGen with patches..."
        
        # Crear un main.cpp modificado sin dependencias de Windows
        if [ -f "DataGen/main.cpp" ]; then
          echo "Patching DataGen/main.cpp for web compilation..."
          sed 's/#include <windows.h>/\/\/ #include <windows.h> \/\/ Disabled for Emscripten/' DataGen/main.cpp > DataGen/main_web.cpp
          sed -i 's/HANDLE/void*/' DataGen/main_web.cpp
          sed -i 's/CreateThread/\/\/CreateThread/' DataGen/main_web.cpp
          sed -i 's/WaitForSingleObject/\/\/WaitForSingleObject/' DataGen/main_web.cpp
          
          echo "Compiling patched DataGen..."
          em++ -std=c++17 -O1 \
            -s WASM=1 \
            -s MODULARIZE=1 \
            -s EXPORT_NAME='WC3Module' \
            -s EXPORTED_RUNTIME_METHODS='["FS","ccall","cwrap","UTF8ToString","stringToUTF8"]' \
            -s ALLOW_MEMORY_GROWTH=1 \
            -s FILESYSTEM=1 \
            --bind \
            -I. -IDataGen \
            -DEMSCRIPTEN \
            -DNO_WINDOWS \
            -DUSE_EMSCRIPTEN \
            DataGen/main_web.cpp \
            -o build/wc3data.js \
            -s ENVIRONMENT='web'
        else
          echo "No DataGen/main.cpp found, creating minimal stub..."
          cat > build_stub.cpp << 'EOF'
#include <emscripten/bind.h>
#include <string>

class WC3Map {
public:
    WC3Map() {}
    bool load(const std::string& data) { return true; }
    std::string getFile(const std::string& name) { return ""; }
    void setFile(const std::string& name, const std::string& data) {}
    std::string save() { return ""; }
};

EMSCRIPTEN_BINDINGS(wc3data) {
    emscripten::class_<WC3Map>("Map")
        .constructor<>()
        .function("load", &WC3Map::load)
        .function("getFile", &WC3Map::getFile)
        .function("setFile", &WC3Map::setFile)
        .function("save", &WC3Map::save);
}
EOF
          
          em++ -std=c++17 -O1 \
            -s WASM=1 \
            -s MODULARIZE=1 \
            -s EXPORT_NAME='WC3Module' \
            -s EXPORTED_RUNTIME_METHODS='["FS","ccall","cwrap"]' \
            -s ALLOW_MEMORY_GROWTH=1 \
            --bind \
            -DEMSCRIPTEN \
            build_stub.cpp \
            -o build/wc3data.js \
            -s ENVIRONMENT='web'
        fi

    - name: Create wrapper for easy usage
      run: |
        cat > build/wc3data-wrapper.js << 'EOF'
        // Wrapper para facilitar el uso de wc3data
        let WC3DataModule = null;
        
        async function initWC3Data() {
          if (!WC3DataModule) {
            WC3DataModule = await WC3Module();
          }
          return WC3DataModule;
        }
        
        // Exportar para uso en browser y Node.js
        if (typeof module !== 'undefined' && module.exports) {
          module.exports = { initWC3Data, WC3Module };
        } else if (typeof window !== 'undefined') {
          window.initWC3Data = initWC3Data;
        }
        EOF

    - name: List generated files
      run: |
        echo "Generated files:"
        ls -la build/
        echo "File sizes:"
        du -h build/*

    - name: Create usage instructions
      run: |
        cat > build/README.md << 'EOF'
        # wc3data WebAssembly Build
        
        ## Archivos generados:
        - `wc3data.js`: Código JavaScript principal
        - `wc3data.wasm`: Módulo WebAssembly compilado
        - `wc3data.data`: Archivos de datos (si están presentes)
        - `wc3data-wrapper.js`: Wrapper para facilitar el uso
        
        ## Uso en HTML:
        
        ```html
        <!DOCTYPE html>
        <html>
        <head>
            <title>WC3 Data Example</title>
        </head>
        <body>
            <script src="wc3data.js"></script>
            <script src="wc3data-wrapper.js"></script>
            <script>
                async function main() {
                    try {
                        const module = await initWC3Data();
                        console.log('WC3Data module loaded successfully');
                        
                        // Usar la API aquí
                        // Ejemplo: const map = new module.Map();
                        
                    } catch (error) {
                        console.error('Error loading WC3Data:', error);
                    }
                }
                
                main();
            </script>
        </body>
        </html>
        ```
        
        ## Uso programático:
        
        ```javascript
        // Inicializar el módulo
        const module = await initWC3Data();
        
        // Cargar un mapa (ejemplo)
        const mapData = new Uint8Array(mapFileBuffer);
        const map = new module.Map();
        map.load(mapData);
        
        // Extraer archivos
        const war3mapJ = map.getFile('war3map.j');
        
        // Modificar archivos
        map.setFile('war3map.j', newScriptData);
        
        // Guardar mapa modificado
        const modifiedMapBuffer = map.save();
        ```
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wc3data-wasm-build
        path: |
          build/wc3data.js
          build/wc3data.wasm
          build/wc3data.data
          build/wc3data-wrapper.js
          build/README.md
        retention-days: 30

    - name: Upload build logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          build/
          /tmp/emscripten_temp*/
        retention-days: 7
