name: Build wc3data WebAssembly

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache Emscripten
      id: cache-emsdk
      uses: actions/cache@v3
      with:
        path: emsdk
        key: emsdk-${{ runner.os }}-3.1.50
    
    - name: Setup Emscripten SDK
      if: steps.cache-emsdk.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install 3.1.50
        ./emsdk activate 3.1.50
    
    - name: Activate Emscripten SDK
      run: |
        cd emsdk
        source ./emsdk_env.sh
        echo "EMSDK=$(pwd)" >> $GITHUB_ENV
        echo "$(pwd)" >> $GITHUB_PATH
        echo "$(pwd)/upstream/emscripten" >> $GITHUB_PATH
    
    - name: Verify Emscripten Installation
      run: |
        source emsdk/emsdk_env.sh
        emcc --version
        which emcc
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Compile wc3data to WebAssembly
      run: |
        source emsdk/emsdk_env.sh
        
        # Definir archivos fuente principales de wc3data
        SOURCES=""
        
        # Buscar archivos fuente C++ principales
        if [ -f "DataGen/main.cpp" ]; then
            SOURCES="$SOURCES DataGen/main.cpp"
        fi
        
        # Agregar archivos fuente del core de la librería
        for file in $(find . -name "*.cpp" -not -path "./build/*" -not -path "./emsdk/*" | grep -v test | grep -v example); do
            SOURCES="$SOURCES $file"
        done
        
        # Compilar con emcc
        emcc $SOURCES \
          -I. \
          -IDataGen \
          -std=c++17 \
          -O3 \
          -s WASM=1 \
          -s MODULARIZE=1 \
          -s EXPORT_NAME='WC3Module' \
          -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap","getValue","setValue","UTF8ToString","stringToUTF8"]' \
          -s EXPORTED_FUNCTIONS='["_malloc","_free","_main"]' \
          -s ALLOW_MEMORY_GROWTH=1 \
          -s MAXIMUM_MEMORY=1073741824 \
          -s STACK_SIZE=5242880 \
          -s USE_ZLIB=1 \
          -s ENVIRONMENT='web,worker' \
          -s SINGLE_FILE=0 \
          -s ASSERTIONS=0 \
          -s DISABLE_EXCEPTION_CATCHING=0 \
          --bind \
          --embed-file DataGen/meta.gzx@/meta.gzx \
          -o build/wc3data.js
    
    - name: Alternative compilation approach (fallback)
      if: failure()
      run: |
        source emsdk/emsdk_env.sh
        
        # Enfoque más simple si el anterior falla
        # Buscar el archivo principal del DataGen
        MAIN_FILE=""
        if [ -f "DataGen/main.cpp" ]; then
            MAIN_FILE="DataGen/main.cpp"
        elif [ -f "main.cpp" ]; then
            MAIN_FILE="main.cpp"
        else
            echo "No se encontró archivo main.cpp"
            exit 1
        fi
        
        # Recopilar archivos de código fuente
        SOURCES="$MAIN_FILE"
        
        # Buscar otros archivos CPP relevantes para wc3data
        for dir in DataGen src; do
            if [ -d "$dir" ]; then
                for file in $(find $dir -name "*.cpp" -not -name "main.cpp"); do
                    SOURCES="$SOURCES $file"
                done
            fi
        done
        
        echo "Compilando archivos: $SOURCES"
        
        emcc $SOURCES \
          -I. \
          -IDataGen \
          -Isrc \
          -std=c++17 \
          -O2 \
          -s WASM=1 \
          -s MODULARIZE=1 \
          -s EXPORT_NAME='WC3Module' \
          -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap","getValue","setValue","UTF8ToString","stringToUTF8","FS"]' \
          -s EXPORTED_FUNCTIONS='["_malloc","_free"]' \
          -s ALLOW_MEMORY_GROWTH=1 \
          -s INITIAL_MEMORY=67108864 \
          -s USE_ZLIB=1 \
          -s FILESYSTEM=1 \
          -s ENVIRONMENT='web' \
          --bind \
          -o build/wc3data.js
    
    - name: Create JavaScript wrapper with API exposure
      run: |
        cat > build/wc3data-wrapper.js << 'EOF'
        // WC3Data WebAssembly Wrapper
        class WC3DataWrapper {
          constructor(module) {
            this.module = module;
            this.initialized = false;
          }
          
          async initialize() {
            if (this.initialized) return;
            
            // Configurar sistema de archivos virtual si es necesario
            if (this.module.FS) {
              try {
                this.module.FS.mkdir('/maps');
              } catch (e) {
                // El directorio ya existe
              }
            }
            
            this.initialized = true;
          }
          
          // API para cargar archivos de mapa
          loadMapFile(arrayBuffer, filename) {
            if (!this.initialized) {
              throw new Error('WC3Data no está inicializado. Llama a initialize() primero.');
            }
            
            try {
              // Crear archivo en el sistema de archivos virtual
              const uint8Array = new Uint8Array(arrayBuffer);
              this.module.FS.writeFile('/maps/' + filename, uint8Array);
              
              // Aquí deberías llamar a la función específica de wc3data para parsear el mapa
              // Esta es una implementación de ejemplo que necesitará ser ajustada
              // según las funciones específicas expuestas por wc3data
              
              return {
                success: true,
                filename: filename,
                size: uint8Array.length
              };
            } catch (error) {
              return {
                success: false,
                error: error.message
              };
            }
          }
          
          // API para extraer archivos internos del mapa
          extractFile(mapFilename, internalFilename) {
            if (!this.initialized) {
              throw new Error('WC3Data no está inicializado.');
            }
            
            try {
              // Implementación de ejemplo - ajustar según la API real de wc3data
              const mapPath = '/maps/' + mapFilename;
              
              // Esta función necesitará ser implementada usando las funciones
              // específicas expuestas por wc3data mediante --bind
              
              return {
                success: true,
                filename: internalFilename,
                data: null // Aquí debería ir el contenido del archivo extraído
              };
            } catch (error) {
              return {
                success: false,
                error: error.message
              };
            }
          }
          
          // API para obtener información del mapa
          getMapInfo(filename) {
            if (!this.initialized) {
              throw new Error('WC3Data no está inicializado.');
            }
            
            // Implementación de ejemplo
            return {
              success: true,
              info: {
                name: 'Unknown Map',
                description: 'No description available',
                players: 0,
                version: 'Unknown'
              }
            };
          }
        }
        
        // Función de inicialización global
        window.initWC3Data = async function() {
          try {
            const module = await WC3Module();
            const wrapper = new WC3DataWrapper(module);
            await wrapper.initialize();
            
            // Exponer la API globalmente
            window.wc3data = {
              Map: {
                load: wrapper.loadMapFile.bind(wrapper),
                extract: wrapper.extractFile.bind(wrapper),
                getInfo: wrapper.getMapInfo.bind(wrapper)
              }
            };
            
            return wrapper;
          } catch (error) {
            console.error('Error inicializando WC3Data:', error);
            throw error;
          }
        };
        EOF
    
    - name: Create HTML example
      run: |
        cat > build/example.html << 'EOF'
        <!DOCTYPE html>
        <html lang="es">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>WC3Data WebAssembly Example</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .container { max-width: 800px; margin: 0 auto; }
                .status { margin: 10px 0; padding: 10px; border-radius: 4px; }
                .success { background-color: #e8f5e8; color: #2e7d2e; }
                .error { background-color: #ffeaea; color: #d63031; }
                .loading { background-color: #e8f4f8; color: #0984e3; }
                button { padding: 10px 20px; margin: 5px; background: #0984e3; color: white; border: none; border-radius: 4px; cursor: pointer; }
                button:hover { background: #74b9ff; }
                button:disabled { background: #ddd; cursor: not-allowed; }
                #fileInput { margin: 10px 0; }
                #output { margin-top: 20px; padding: 10px; background: #f8f9fa; border-radius: 4px; white-space: pre-wrap; font-family: monospace; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>WC3Data WebAssembly Demo</h1>
                
                <div id="status" class="status loading">Inicializando WC3Data...</div>
                
                <div>
                    <h3>Cargar archivo de mapa Warcraft III (.w3m, .w3x)</h3>
                    <input type="file" id="fileInput" accept=".w3m,.w3x" disabled>
                    <button id="loadButton" onclick="loadMap()" disabled>Cargar Mapa</button>
                    <button id="extractButton" onclick="extractWar3mapJ()" disabled>Extraer war3map.j</button>
                </div>
                
                <div id="output"></div>
            </div>
        
            <script src="wc3data.js"></script>
            <script src="wc3data-wrapper.js"></script>
            <script>
                let wc3dataWrapper = null;
                let currentMapFile = null;
                
                // Inicializar WC3Data
                async function init() {
                    try {
                        updateStatus('Cargando WC3Data...', 'loading');
                        wc3dataWrapper = await initWC3Data();
                        updateStatus('WC3Data cargado correctamente', 'success');
                        
                        // Habilitar controles
                        document.getElementById('fileInput').disabled = false;
                        document.getElementById('loadButton').disabled = false;
                        
                    } catch (error) {
                        updateStatus('Error cargando WC3Data: ' + error.message, 'error');
                        console.error(error);
                    }
                }
                
                function updateStatus(message, type) {
                    const statusEl = document.getElementById('status');
                    statusEl.textContent = message;
                    statusEl.className = 'status ' + type;
                }
                
                function updateOutput(text) {
                    document.getElementById('output').textContent = text;
                }
                
                async function loadMap() {
                    const fileInput = document.getElementById('fileInput');
                    const file = fileInput.files[0];
                    
                    if (!file) {
                        updateStatus('Por favor selecciona un archivo de mapa', 'error');
                        return;
                    }
                    
                    try {
                        updateStatus('Cargando mapa: ' + file.name, 'loading');
                        
                        const arrayBuffer = await file.arrayBuffer();
                        const result = window.wc3data.Map.load(arrayBuffer, file.name);
                        
                        if (result.success) {
                            currentMapFile = file.name;
                            updateStatus('Mapa cargado correctamente: ' + file.name, 'success');
                            updateOutput('Archivo cargado:\n' + JSON.stringify(result, null, 2));
                            
                            // Habilitar botón de extracción
                            document.getElementById('extractButton').disabled = false;
                            
                        } else {
                            updateStatus('Error cargando mapa: ' + result.error, 'error');
                            updateOutput('Error: ' + result.error);
                        }
                        
                    } catch (error) {
                        updateStatus('Error procesando archivo: ' + error.message, 'error');
                        updateOutput('Error: ' + error.message);
                        console.error(error);
                    }
                }
                
                async function extractWar3mapJ() {
                    if (!currentMapFile) {
                        updateStatus('Primero carga un archivo de mapa', 'error');
                        return;
                    }
                    
                    try {
                        updateStatus('Extrayendo war3map.j...', 'loading');
                        
                        const result = window.wc3data.Map.extract(currentMapFile, 'war3map.j');
                        
                        if (result.success) {
                            updateStatus('Archivo war3map.j extraído correctamente', 'success');
                            updateOutput('Archivo extraído:\n' + JSON.stringify(result, null, 2));
                        } else {
                            updateStatus('Error extrayendo archivo: ' + result.error, 'error');
                            updateOutput('Error: ' + result.error);
                        }
                        
                    } catch (error) {
                        updateStatus('Error extrayendo archivo: ' + error.message, 'error');
                        updateOutput('Error: ' + error.message);
                        console.error(error);
                    }
                }
                
                // Inicializar cuando la página esté lista
                window.addEventListener('load', init);
            </script>
        </body>
        </html>
        EOF
    
    - name: Create README for artifacts
      run: |
        cat > build/README.md << 'EOF'
        # WC3Data WebAssembly Build
        
        Este paquete contiene los archivos compilados de wc3data para uso en navegadores web.
        
        ## Archivos incluidos:
        
        - `wc3data.js` - Archivo JavaScript principal (glue code)
        - `wc3data.wasm` - Módulo WebAssembly compilado
        - `wc3data-wrapper.js` - Wrapper JavaScript con API simplificada
        - `example.html` - Página HTML de ejemplo
        - `README.md` - Este archivo
        
        ## Uso básico:
        
        1. Incluye ambos archivos JS en tu página HTML:
        ```html
        <script src="wc3data.js"></script>
        <script src="wc3data-wrapper.js"></script>
        ```
        
        2. Inicializa WC3Data:
        ```javascript
        async function init() {
            const wrapper = await initWC3Data();
            console.log('WC3Data listo para usar');
        }
        ```
        
        3. Usa la API para manipular mapas:
        ```javascript
        // Cargar un archivo de mapa
        const result = window.wc3data.Map.load(arrayBuffer, 'mapa.w3x');
        
        // Extraer archivo interno
        const extracted = window.wc3data.Map.extract('mapa.w3x', 'war3map.j');
        ```
        
        ## Notas importantes:
        
        - Los archivos .js y .wasm deben estar en el mismo directorio
        - El servidor web debe servir archivos .wasm con el MIME type correcto
        - Para desarrollo local, usa un servidor HTTP (no file://)
        
        ## Ejemplo completo:
        
        Abre `example.html` en un navegador web a través de un servidor HTTP para ver un ejemplo funcional.
        EOF
    
    - name: List generated files
      run: |
        echo "Archivos generados:"
        ls -la build/
        
        echo -e "\nTamaños de archivos:"
        du -h build/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wc3data-webassembly
        path: build/
        retention-days: 30
    
    - name: Upload WASM artifacts separately
      uses: actions/upload-artifact@v4
      with:
        name: wc3data-wasm-only
        path: |
          build/wc3data.js
          build/wc3data.wasm
          build/wc3data-wrapper.js
        retention-days: 90
