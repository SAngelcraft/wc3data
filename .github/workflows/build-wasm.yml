# .github/workflows/build-wasm-simple.yml
# Versión simplificada y más robusta
name: Build WC3Data WASM (Simple)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git python3 nodejs npm
        
    - name: Setup Emscripten manually
      run: |
        cd $HOME
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install 3.1.45
        ./emsdk activate 3.1.45
        source ./emsdk_env.sh
        
        # Add to environment for subsequent steps
        echo "$HOME/emsdk" >> $GITHUB_PATH
        echo "$HOME/emsdk/upstream/emscripten" >> $GITHUB_PATH
        echo "EMSDK=$HOME/emsdk" >> $GITHUB_ENV
        echo "EM_CONFIG=$HOME/emsdk/.emscripten" >> $GITHUB_ENV
        
    - name: Verify Emscripten
      run: |
        source $HOME/emsdk/emsdk_env.sh
        emcc --version
        
    - name: Create directories
      run: |
        mkdir -p build
        mkdir -p src/maps
        
    - name: Create simple WASM source
      run: |
        cat > build/simple_wc3.cpp << 'EOF'
        #include <emscripten/bind.h>
        #include <emscripten/emscripten.h>
        #include <string>
        #include <cstring>

        // Funciones básicas para WC3
        extern "C" {
            EMSCRIPTEN_KEEPALIVE
            int isValidWC3Map(const char* data, int size) {
                if (!data || size < 4) return 0;
                
                // Check for MPQ signature
                if (strncmp(data, "MPQ\x1A", 4) == 0) return 1;
                // Check for W3M signature
                if (strncmp(data, "HM3W", 4) == 0) return 1;
                
                return 0;
            }
            
            EMSCRIPTEN_KEEPALIVE
            const char* getMapType(const char* data, int size) {
                static std::string result;
                
                if (!data || size < 4) {
                    result = "Invalid";
                    return result.c_str();
                }
                
                if (strncmp(data, "MPQ\x1A", 4) == 0) {
                    result = "MPQ Archive";
                } else if (strncmp(data, "HM3W", 4) == 0) {
                    result = "W3M Map";
                } else {
                    result = "Unknown";
                }
                
                return result.c_str();
            }
            
            EMSCRIPTEN_KEEPALIVE
            int getFileSize(const char* data, int size) {
                return size;
            }
        }

        // Simple class for binding
        class WC3Utils {
        public:
            static std::string analyzeBuffer(const std::string& buffer) {
                if (buffer.size() < 4) return "Too small";
                
                const char* data = buffer.c_str();
                
                if (strncmp(data, "MPQ\x1A", 4) == 0) {
                    return "MPQ Archive detected";
                } else if (strncmp(data, "HM3W", 4) == 0) {
                    return "Warcraft III Map detected";
                }
                
                return "Unknown file format";
            }
        };

        // Emscripten bindings
        using namespace emscripten;

        EMSCRIPTEN_BINDINGS(wc3_simple) {
            class_<WC3Utils>("WC3Utils")
                .class_function("analyzeBuffer", &WC3Utils::analyzeBuffer);
            
            function("isValidWC3Map", &isValidWC3Map, allow_raw_pointers());
            function("getMapType", &getMapType, allow_raw_pointers());
            function("getFileSize", &getFileSize, allow_raw_pointers());
        }
        EOF
        
    - name: Compile WASM (with fallback)
      run: |
        source $HOME/emsdk/emsdk_env.sh
        
        echo "Attempting compilation with full flags..."
        if emcc build/simple_wc3.cpp \
          -O2 \
          -s WASM=1 \
          -s MODULARIZE=1 \
          -s EXPORT_NAME="'WC3Module'" \
          -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap"]' \
          -s ALLOW_MEMORY_GROWTH=1 \
          -s INITIAL_MEMORY=16777216 \
          --bind \
          -std=c++14 \
          -o build/wc3dat.js; then
          echo "✅ Compilation successful with full flags"
        else
          echo "⚠️ Full compilation failed, trying minimal flags..."
          emcc build/simple_wc3.cpp \
            -s WASM=1 \
            -s MODULARIZE=1 \
            --bind \
            -o build/wc3dat.js
          echo "✅ Compilation successful with minimal flags"
        fi
        
    - name: Create JavaScript wrapper
      run: |
        cat > build/wc3_api.js << 'EOF'
        // Simple WC3 Data API
        class SimpleWC3API {
            constructor() {
                this.module = null;
                this.ready = false;
            }
            
            async initialize() {
                if (this.ready) return this.module;
                
                try {
                    const moduleFactory = (await import('./wc3dat.js')).default;
                    this.module = await moduleFactory();
                    this.ready = true;
                    console.log('WC3 WASM module loaded');
                    return this.module;
                } catch (error) {
                    console.error('Failed to load WC3 module:', error);
                    throw error;
                }
            }
            
            async analyzeFile(arrayBuffer) {
                const module = await this.initialize();
                
                if (!arrayBuffer || arrayBuffer.byteLength === 0) {
                    throw new Error('Invalid file buffer');
                }
                
                // Convert ArrayBuffer to string for simple analysis
                const uint8Array = new Uint8Array(arrayBuffer);
                let str = '';
                for (let i = 0; i < Math.min(uint8Array.length, 1024); i++) {
                    str += String.fromCharCode(uint8Array[i]);
                }
                
                try {
                    const analysis = module.WC3Utils.analyzeBuffer(str);
                    
                    return {
                        type: analysis,
                        size: arrayBuffer.byteLength,
                        isValid: analysis.includes('detected'),
                        timestamp: new Date().toISOString()
                    };
                } catch (error) {
                    console.error('Analysis error:', error);
                    return {
                        type: 'Analysis failed',
                        size: arrayBuffer.byteLength,
                        isValid: false,
                        error: error.message
                    };
                }
            }
        }
        
        // Export for different environments
        if (typeof module !== 'undefined' && module.exports) {
            module.exports = SimpleWC3API;
        }
        if (typeof window !== 'undefined') {
            window.SimpleWC3API = SimpleWC3API;
        }
        
        export default SimpleWC3API;
        EOF
        
    - name: Verify build
      run: |
        echo "=== Build verification ==="
        ls -la build/
        
        if [ -f "build/wc3dat.wasm" ]; then
          echo "✅ WASM file: $(stat -c%s build/wc3dat.wasm) bytes"
          file build/wc3dat.wasm
        else
          echo "❌ WASM file missing!"
          exit 1
        fi
        
        if [ -f "build/wc3dat.js" ]; then
          echo "✅ JS file: $(stat -c%s build/wc3dat.js) bytes"
          head -5 build/wc3dat.js
        else
          echo "❌ JS file missing!"
          exit 1
        fi
        
    - name: Copy to project structure
      run: |
        # Copy to expected locations
        cp build/wc3dat.js src/maps/wc3dat.jscc
        cp build/wc3dat.wasm src/maps/
        cp build/wc3_api.js src/maps/
        
        echo "✅ Files copied to src/maps/"
        ls -la src/maps/
        
    - name: Create test page
      run: |
        cat > build/test.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>WC3 Map Analyzer Test</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .result { margin: 10px 0; padding: 10px; background: #f0f0f0; }
                .error { background: #ffebee; }
                .success { background: #e8f5e8; }
            </style>
        </head>
        <body>
            <h1>WC3 Map Analyzer</h1>
            <p>Select a Warcraft III map file (.w3m, .w3x) to analyze:</p>
            
            <input type="file" id="fileInput" accept=".w3m,.w3x">
            <div id="results"></div>
            
            <script type="module">
                import SimpleWC3API from './wc3_api.js';
                
                const api = new SimpleWC3API();
                const fileInput = document.getElementById('fileInput');
                const results = document.getElementById('results');
                
                fileInput.addEventListener('change', async (event) => {
                    const file = event.target.files[0];
                    if (!file) return;
                    
                    results.innerHTML = '<p>Analyzing file...</p>';
                    
                    try {
                        const buffer = await file.arrayBuffer();
                        const result = await api.analyzeFile(buffer);
                        
                        results.innerHTML = `
                            <div class="result ${result.isValid ? 'success' : 'error'}">
                                <h3>Analysis Result</h3>
                                <p><strong>File:</strong> ${file.name}</p>
                                <p><strong>Type:</strong> ${result.type}</p>
                                <p><strong>Size:</strong> ${result.size} bytes</p>
                                <p><strong>Valid WC3 Map:</strong> ${result.isValid ? 'Yes' : 'No'}</p>
                                <p><strong>Analyzed:</strong> ${result.timestamp}</p>
                                ${result.error ? `<p><strong>Error:</strong> ${result.error}</p>` : ''}
                            </div>
                        `;
                    } catch (error) {
                        results.innerHTML = `
                            <div class="result error">
                                <h3>Error</h3>
                                <p>${error.message}</p>
                            </div>
                        `;
                    }
                });
            </script>
        </body>
        </html>
        EOF
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wc3dat-simple-build
        path: |
          build/wc3dat.js
          build/wc3dat.wasm
          build/wc3_api.js
          build/test.html
          src/maps/
        retention-days: 30
